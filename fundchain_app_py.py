# -*- coding: utf-8 -*-
"""fundchain_app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gxl1GXf8VW4TWWb5u_y7bCOYqhRPrXcg
"""

import streamlit as st
import pandas as pd
import plotly.express as px

st.set_page_config(page_title="FundChain Dashboard", layout="wide")

# ---------------- Header ---------------- #
st.markdown("""
    <h1 style='color:#1a52a1; display:flex; align-items:center;'>
        <span style='margin-right:10px;'>📊</span> FundChain Dashboard 🇪🇺
    </h1>
    <p style='color:gray;'>Making public funds truly public – European Commission</p>
""", unsafe_allow_html=True)

# ---------------- Filters ---------------- #
st.sidebar.header("🔍 Filters")
country = st.sidebar.selectbox("Country", ["All", "Greece", "Spain", "France"])
status = st.sidebar.selectbox("Project Status", ["All", "Active", "Completed", "Delayed"])
ai_score_range = st.sidebar.selectbox("AI Score", ["All", "High (8-10)", "Medium (5-7)", "Low (0-4)"])
search = st.sidebar.text_input("Search Projects or Codes")

# ---------------- Project Data ---------------- #
projects = pd.DataFrame([
    {"Project": "Athens Smart City", "Country": "Greece", "Funding": 4.2, "AI Score": 8.7, "Status": "Active", "Code": "GR-2023-SC097", "Last Update": "2 days ago"},
    {"Project": "Barcelona Energy Hub", "Country": "Spain", "Funding": 7.8, "AI Score": 6.4, "Status": "Delayed", "Code": "ES-2022-RE128", "Last Update": "5 days ago"},
    {"Project": "Paris Digital Infra", "Country": "France", "Funding": 3.5, "AI Score": 9.2, "Status": "Active", "Code": "FR-2023-DI104", "Last Update": "Today"},
    {"Project": "Thessaloniki Port", "Country": "Greece", "Funding": 12.1, "AI Score": 4.1, "Status": "Active", "Code": "GR-2021-PM053", "Last Update": "1 week ago"},
    {"Project": "Valencia Healthcare", "Country": "Spain", "Funding": 2.6, "AI Score": 8.9, "Status": "Completed", "Code": "ES-2021-HI076", "Last Update": "3 weeks ago"},
])

# ---------------- Filtering ---------------- #
df = projects.copy()

if country != "All":
    df = df[df["Country"] == country]

if status != "All":
    df = df[df["Status"] == status]

if ai_score_range != "All":
    if "High" in ai_score_range:
        df = df[df["AI Score"] >= 8]
    elif "Medium" in ai_score_range:
        df = df[(df["AI Score"] >= 5) & (df["AI Score"] < 8)]
    elif "Low" in ai_score_range:
        df = df[df["AI Score"] < 5]

if search:
    df = df[df["Project"].str.contains(search, case=False) | df["Code"].str.contains(search, case=False)]

# ---------------- KPIs ---------------- #
col1, col2, col3, col4 = st.columns(4)
col1.metric("Total Active Projects", "142", "+4.2%")
col2.metric("Total Funds Allocated", "€463.8M", "+12.3%")
col3.metric("Avg AI Score", "7.4 / 10", "+0.6")
col4.metric("Docs Pending Review", "37", "+8")

# ---------------- Projects Table ---------------- #
st.subheader("📋 Projects Overview")
st.dataframe(df.set_index("Project")[["Country", "Funding", "AI Score", "Status", "Last Update"]])

# ---------------- Blockchain Activity ---------------- #
st.subheader("🔗 Blockchain Transactions")
st.write("Most recent blockchain fund flows related to the projects:")
blockchain = pd.DataFrame([
    {"Type": "Send", "Project": "GR-2023-SC097", "Amount": "€850,000", "Time": "Today, 10:23 AM"},
    {"Type": "Receive", "Project": "ES-2022-RE128", "Amount": "€315,600", "Time": "Yesterday, 3:47 PM"},
    {"Type": "Send", "Project": "FR-2023-DI104", "Amount": "€750,000", "Time": "Mar 31, 2:15 PM"},
    {"Type": "Receive", "Project": "GR-2021-PM053", "Amount": "€425,800", "Time": "Mar 29, 9:32 AM"},
    {"Type": "Send", "Project": "ES-2021-HI076", "Amount": "€520,000", "Time": "Mar 27, 11:05 AM"},
])
st.table(blockchain)

# ---------------- Reports ---------------- #
st.subheader("📄 Automated Reports")
with st.expander("Athens Smart City (GR-2023-SC097) – Apr 1, 2025"):
    st.write("Project is on schedule with 68% of milestones completed. Financial execution rate: 62%. All documentation compliant.")
with st.expander("Barcelona Energy Hub (ES-2022-RE128) – Mar 30, 2025"):
    st.write("Delay in solar panel installation. Missing permits. Follow-up needed with local authorities.")
with st.expander("Paris Digital Infra (FR-2023-DI104) – Mar 28, 2025"):
    st.write("Metrics above expectations. Phase completed 10 days early. 92% budget efficiency.")
with st.expander("Thessaloniki Port (GR-2021-PM053) – Mar 25, 2025"):
    st.write("38% overspend in equipment procurement. Urgent financial adjustment recommended.")

# ---------------- Chart: AI Scores ---------------- #
st.subheader("📈 AI Scores Trend")
fig = px.line(
    x=["Jan", "Feb", "Mar", "Apr"],
    y=[6.8, 7.0, 7.2, 7.4],
    labels={"x": "Month", "y": "Average AI Score"},
    title="Average AI Score Over Time"
)
st.plotly_chart(fig, use_container_width=True)

# ---------------- Footer ---------------- #
st.markdown("---")
st.markdown("📘 FundChain • Dashboard for EU Projects | Powered by Streamlit")